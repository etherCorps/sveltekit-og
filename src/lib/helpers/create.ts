import type {SvelteComponent} from "svelte";

import type { SatoriOptions } from 'satori';
import type { ResvgRenderOptions } from '@resvg/resvg-wasm';
import { svelteComponentToJsx, toReactElement } from '@ethercorps/svelte-h2j';

import { loadDynamicAsset } from './emoji.js';
import { default_fonts } from '../helpers/defaults.js';
import { useResvg, useSatori } from '../providers/instances.js';
import type { ComponentOptions, ImageOptions, VNode } from '../types.js';


// TODO: Export VNode Type from svelte-h2j
// TODO: Make svelte-h2j functions async in new v5 support

export async function createVNode(element: string | SvelteComponent, componentOptions?: ComponentOptions): VNode {
	return typeof element === 'string' ? toReactElement(element) : svelteComponentToJsx(element, componentOptions?.props)
}

export async function createSvg(element: string | SvelteComponent, imageOptions: ImageOptions, componentOptions?: ComponentOptions): Promise<string> {
	const [satori, vnodes] = await Promise.all([useSatori(), createVNode(element, componentOptions)]);

	if (!Object.hasOwn(imageOptions, 'fonts')) {
		imageOptions['fonts'] = await default_fonts()
	}

	// Add dynamic emoji loading handler
	imageOptions['loadAdditionalAsset'] = loadDynamicAsset({
		emoji: imageOptions.emoji
	})

	if (imageOptions.debug) {
		console.info('VNode proivided to satori:', vnodes, '\n');
		console.info('Options proivided to satori:', imageOptions, '\n');
	}

	return satori(vnodes,  imageOptions as SatoriOptions)
}

export async function createPng(element: string | SvelteComponent, imageOptions: ImageOptions, componentOptions?: ComponentOptions) {
	const svg = await createSvg(element, imageOptions, componentOptions)

	if (imageOptions.debug) {
		console.info('SVG generated by satori:', svg, '\n');
	}

	const resvg_instance = await useResvg();
	console.log(resvg_instance, 'f');

	const resvg_options: ResvgRenderOptions = {
		fitTo: {
			mode: 'width' as const,
			value: imageOptions.width
		},
		logLevel: imageOptions.debug ? 'info' : 'error'
	}

	if (imageOptions.debug) {
		console.info('Options provided to ReSVG:', resvg_options, '\n');
	}

	const resvg = new resvg_instance(svg, resvg_options)
	const png_data = resvg.render()
	return png_data.asPng()
}